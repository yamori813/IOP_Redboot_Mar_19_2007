/*****************************************************************************
 *
 * Tundra Semiconductor Corporation
 * 
 * Copyright 2002, 2003, Tundra Semiconductor Corporation
 * 
 * This software is the property of Tundra Semiconductor Corporation
 * (Tundra), which specifically grants the user the right to use this
 * software in connection with the Intel(r) 80314 Companion Chip, provided
 * this notice is not removed or altered.  All other rights are reserved
 * by Tundra.
 * 
 * TUNDRA MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH REGARD
 * TO THIS SOFTWARE.  IN NO EVENT SHALL AMD BE LIABLE FOR INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES IN CONNECTION WITH OR ARISING FROM THE
 * FURNISHING, PERFORMANCE, OR USE OF THIS SOFTWARE.
 * 
 *****************************************************************************/

/*-----------------------------------------------------------------------------
* FILENAME: 1.	SpacEthInterrupts.h
*
* DESCRIPTION: Contains definitions of routines servicing SPac's GigE 
*            : interrupts.  
*
*
* HISTORY:
*
*    Rev. Date       Author  Description
*    ---- ---------  ------  ------------------------------------------
*    0.01 Aug 08,02  on     draft 
*    0.01 Sept 08,02  on     added test routines. 
*----------------------------------------------------------------------------*/

#ifndef _SPAC_ETH_ISR_H_
#define _SPAC_ETH_ISR_H_

#ifndef __tuntypes
#include "tuntypes.h"
#endif

#ifndef _SPAC_ETH_DEFS_H_
#include "SpacEthDefs.h"
#endif

#ifdef ETH_REDBOOT 

/* IRQ vector @0x18 calls 0x38 */
  #define IRQVECTOR ((volatile unsigned int *)0x00000038)
/* FIQ vector @0x1C calls 0x3C */
  #define FIQVECTOR ((volatile unsigned int *)0x0000003c )
  
/* Maximal number of user-defined interrupt vectors */  
  #define MAX_USER_VECTORS (64) 
/* Temporary define for the GigE ISR IRQ line. */
  #define ETH_MPIC_GIGE_IRQ (16)
/* Temporary define for the GigE ISR vector. */
  #define ETH_MPIC_GIGE_VECTOR (ETH_MPIC_GIGE_IRQ)
/* MPIC low base address, as an offset from the chip base address. */
  #define ETH_MPIC_BASE_ADDR_LO (0x7400)
/* MPIC high base address, as an offset from the chip base address. */
  #define ETH_MPIC_BASE_ADDR_HI (0x77ff) 
/* MPIC Registers. */
  #define ETH_MPIC_IVPR16_REG (ETH_MPIC_BASE_ADDR_LO + 0x180)
  #define ETH_MPIC_IDR16_REG (ETH_MPIC_BASE_ADDR_LO + 0x184)
  #define ETH_MPIC_TASK0_REG (ETH_MPIC_BASE_ADDR_LO + 0x300)
  #define ETH_MPIC_TASK1_REG (ETH_MPIC_BASE_ADDR_LO + 0x340)
  #define ETH_MPIC_TASK2_REG (ETH_MPIC_BASE_ADDR_LO + 0x380)
  #define ETH_MPIC_TASK3_REG (ETH_MPIC_BASE_ADDR_LO + 0x3C0)
  #define ETH_MPIC_IACK0_REG (ETH_MPIC_BASE_ADDR_LO + 0x304) 
  #define ETH_MPIC_IACK1_REG (ETH_MPIC_BASE_ADDR_LO + 0x344) 
  #define ETH_MPIC_IACK2_REG (ETH_MPIC_BASE_ADDR_LO + 0x384) 
  #define ETH_MPIC_IACK3_REG (ETH_MPIC_BASE_ADDR_LO + 0x3C4) 
  #define ETH_MPIC_EOI0_REG (ETH_MPIC_BASE_ADDR_LO + 0x308) 
  #define ETH_MPIC_EOI1_REG (ETH_MPIC_BASE_ADDR_LO + 0x348) 
  #define ETH_MPIC_EOI2_REG (ETH_MPIC_BASE_ADDR_LO + 0x388) 
  #define ETH_MPIC_EOI3_REG (ETH_MPIC_BASE_ADDR_LO + 0x3C8) 
  #define ETH_MPIC_CSR0_REG (ETH_MPIC_BASE_ADDR_LO + 0x30C)
  #define ETH_MPIC_CSR1_REG (ETH_MPIC_BASE_ADDR_LO + 0x34C)
  #define ETH_MPIC_CSR2_REG (ETH_MPIC_BASE_ADDR_LO + 0x38C)
  #define ETH_MPIC_CSR3_REG (ETH_MPIC_BASE_ADDR_LO + 0x3CC)
/* MPIC register masks. */
  #define ETH_MPIC_IACK_MASK (0x000000FF)
  #define ETH_MPIC_EOI_MASK (0x000000FF)
  #define ETH_MPIC_IVPR_M_MASK (1 << 31)
  #define ETH_MPIC_IVPR_PRIO_MASK (0xF << 16)
  #define ETH_MPIC_IVPR_S_MASK (1 << 25)
  #define ETH_MPIC_IVPR_P_MASK (1 << 24)
  #define ETH_MPIC_IDR_OUT1_MASK (1 << 0)
  #define ETH_MPIC_IDR_OUT2_MASK (1 << 1)
  #define ETH_MPIC_IDR_OUT3_MASK (1 << 2)
  #define ETH_MPIC_IDR_OUT4_MASK (1 << 3)
  #define ETH_MPIC_TASK_MASK (0x00000000)
/* CIU low base address, as an offset from the chip base address. */
  #define ETH_CIU_BASE_ADDR_LO (0x3000)
/* CIU high base address, as an offset from the chip base address. */
  #define ETH_CIU_BASE_ADDR_HI (0x3fff) 
/* CIU Registers. */
  #define ETH_CIU_CFG_REG (ETH_CIU_BASE_ADDR_LO + 0x038)
/* CIU register masks. */
  #define ETH_CIU_PID_MASK (1 << 8)
/* 80200 register masks. */
  #define ETH_XSCALE_INTCTL_MASK (1 << 1)  

  typedef void (*ISR_SERVICE)(void);
  
/*----------------------------------------------------------------------------
 * Macro: Save and restore registers inside exception handler. 
   NOTE :
   The IRQ_OVI_EPILOG macro is intended as a workaround for a GNU compiler
   stack issue. The code generated by the compiler does not properly
   restore the stack pointer, in case of a routine flagged as being 
   an interrupt handler.
   It is recommended that the IRQ_OVI_EPILOG macro should be re-inspected
   after each interrupt handler code modification, and updated if needed.
 *--------------------------------------------------------------------------*/
  #define ISR_PROLOG  asm volatile("stmfd sp!, {r0-r11,ip,lr}")
  #define ISR_EPILOG  asm volatile("ldmfd sp!,{r0-r11,ip,lr}\n\t" \
                                      "subs pc, lr, #4")
  #define IRQ_OVI_EPILOG  asm volatile("ldmdb r11, {r0,r1,r2,r3,r11,sp,lr}\n\t" \
                                      "ldmia sp!, {r12}\n\t" \
				                              "subs pc, lr, #4")
  

/*----------------------------------------------------------------------------
 * Macro: Restore registers and jump to original vector address 
 *--------------------------------------------------------------------------*/
  #define EXCEPTION_CHAIN(oldVec) \
                asm volatile("stmfd   sp!, {%0};               \n\t" \
                "ldmfd   sp!, {r0, r1, r2, r3, r4, r5, r6, ip, lr, pc}; \n\t" \
                      :               /* Output  list */                \
                      : "r" (oldVec)  /* Input   list */                \
                                      /* Clobber list */);
  
/*----------------------------------------------------------------------------
 * Macro: Load new stack pointer value 
 *--------------------------------------------------------------------------*/
#define INIT_STACK_PTR(address) asm volatile("mov r0, #0; \n\t" \
                                    "mov sp, %0; \n\t" \
                                    :  \
                                    :"r" (address)  \
                                      )
  
/*=========================================================================
 *  Function    : intMpicInit
 *
 *  Arguments   : N/A.
 * 
 *  Description : Initializes the MPIC block.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *              : ETH_INVAL_CFG_ERR - Invalid configuration error. 
 *
 *  Note        : For now GigE-oriented. 
 *           
 =========================================================================*/
SpacEthRtnCode_t intMpicInit(void);
  
/*=========================================================================
 *  Function    : intMpicReset
 *
 *  Arguments   : N/A.
 * 
 *  Description : Resets the MPIC block.
 * 
 *  return      : ETH_OK - Operation succeded.
 *
 *  Note        : For now GigE-oriented. 
 *           
 =========================================================================*/
SpacEthRtnCode_t intMpicReset(void);
  
/*=========================================================================
 *  Function    : SpacIrqIsr
 *
 *  Arguments   : N/A.
 * 
 *  Description : SPac's ISR.
 * 
 *  return      : N/A.
 *
 *  Note        : For now servicing only GigE interrupts. They are expected
 *              : at output 1 only.
 *              
 =========================================================================*/
void SpacIrqIsr(void) __attribute__ ((interrupt ("IRQ")));

/*=========================================================================
 *  Function    : SpacFiqIsr
 *
 *  Arguments   : N/A.
 * 
 *  Description : SPac's ISR.
 * 
 *  return      : N/A.
 *
 *  Note        : For now servicing only FIQ GigE interrupts. They are expected
 *              : at output 0 only.
 *              
 =========================================================================*/
void SpacFiqIsr(void) __attribute__ ((interrupt ("FIQ")));

/*=========================================================================
 *  Function    : gigeHandlerAttachIRQ
 *
 *  Arguments   : irq_service - ISR.
 * 
 *  Description : SPac's ISR attach routine.
 * 
 *  return      : N/A.
 *
 =========================================================================*/
void gigeHandlerAttachIRQ(ISR_SERVICE irq_service);

/*=========================================================================
 *  Function    : gigeHandlerAttachFIQ
 *
 *  Arguments   : irq_service - ISR.
 * 
 *  Description : SPac's ISR attach routine.
 * 
 *  return      : N/A.
 *
 =========================================================================*/
void gigeHandlerAttachFIQ(ISR_SERVICE fiq_service);

/*=========================================================================
 *  Function    : gigeHandlerDetachIRQ
 *
 *  Arguments   : N/A.
 * 
 *  Description : SPac's ISR dettach routine.
 * 
 *  return      : N/A.
 *
 =========================================================================*/
void gigeHandlerDetachIRQ(void);

/*=========================================================================
 *  Function    : gigeHandlerDetachFIQ
 *
 *  Arguments   : N/A.
 * 
 *  Description : SPac's ISR dettach routine.
 * 
 *  return      : N/A.
 *
 =========================================================================*/
void gigeHandlerDetachFIQ(void);

/*=========================================================================
 *  Function    : gigeHandlerAttachVector
 *
 *  Arguments   : req_type - IRQ/FIQ (not used for now).
 *              : vector - index into the vector table.
 *              : int_routine - vector handler to attach. 
 * 
 *  Description : Attach service routine for interrupt vector.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *              
 =========================================================================*/
SpacEthRtnCode_t gigeHandlerAttachVector(
  int req_type,  
  unsigned vector, 
  SpacEthRtnCode_t (*int_routine)(void *));

#endif

/* Number of queue interrupts to check for. */
#define ETH_NUM_Q_INTR (3)

/* Port (test) done type. */
typedef struct {
  int intrDone[ETH_NUM_Q_INTR]; 
} Eth6_2RxTx_t, * Eth6_2RxTxPtr_t;

/* Port (test) done type. */
typedef struct {
  Eth6_2RxTx_t direction[ETH_NUM_PORT_DIRECTIONS]; /* TX = 0, RX = 1. */
} Eth6_2Port_t, * Eth6_2PortPtr_t;


/*=========================================================================
 *  Function    : EthIsr
 *
 *  Arguments   : infoPtr - input, user info passed in.
 * 
 *  Description : GigE's ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 *              : Port0 will get first chance to service its interrupts.
 *              
 =========================================================================*/
SpacEthRtnCode_t EthIsr(
  void * infoPtr
);

/*=========================================================================
 *  Function    : EthPortIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : intrStatus - Port interrupt status.
 *              : infoPtr - input, user info passed in. 
 * 
 *  Description : GigE's ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 *              : Prior to returning, this routine, attempts to clear the 
 *              : interrupt sources.
 =========================================================================*/
SpacEthRtnCode_t EthPortIsr(
  UINT32 portId, 
  register UINT32 intrStatus,   
  void * infoPtr
);

/*=========================================================================
 *  Function    : EthOcnErrIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's OCN ERROR ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthOcnErrIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthRxIdleIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's RX IDLE ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthRxIdleIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthRxAbortIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's RX ABORT ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthRxAbortIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthRxErrorIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's RX ERROR ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthRxErrorIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthRxOverrunIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's RX OVERRUN ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthRxOverrunIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthRxThresholdIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's RX THRESHOLD ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthRxThresholdIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthRxWaitIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's RX WAIT ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *              : ETH_BASE_ADDR_ERR - Invalid chip base address.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 *              : A WAIT condition is expected to happen if a frame was 
 *              : bigger than the space provided in the queue. 
 *              : If there are no more space to receive frames, abort the  
 *              : frame, clean-up and restart the queue. Else, advance the 
 *              : DMA pointer and restart the queue.
 *              : Also, this handler clears the EOQ interrupt associated
 *              : with.
 =========================================================================*/
SpacEthRtnCode_t EthRxWaitIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthRxQueueIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, used to retrieve the qeue id. 
 * 
 *  Description : GigE's RX QUEUE ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *              : ETH_BASE_ADDR_ERR - Invalid chip base address.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 *              : An EOQ condition is expected to happen if a frame was 
 *              : received, and DMA has encountered a LAST/NULL EOQ 
 *              : condition on the last processed descriptor. Update the 
 *              : queue pointer, clean-up and restart the queue. 
 =========================================================================*/
SpacEthRtnCode_t EthRxQueueIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthStatsCarryIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's STATS CARRY ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthStatsCarryIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthTxIdleIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's TX IDLE ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthTxIdleIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthTxAbortIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's TX ABORT ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthTxAbortIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthTxErrorIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's TX ERROR ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthTxErrorIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthTxUnderrunIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's TX UNDERRUN ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthTxUnderrunIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthTxThresholdIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's TX THRESHOLD ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 =========================================================================*/
SpacEthRtnCode_t EthTxThresholdIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthTxWaitIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, user info passed in. 
 * 
 *  Description : GigE's TX WAIT ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *              : ETH_BASE_ADDR_ERR - Invalid chip base address.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 *              : As the driver checks for available space in the TX queue,
 *              : a WAIT condition is expected to happen if a frame was 
 *              : interrupted, and DMA has encountered an EOQ condition.
 *              : If the EOF was forgotten, abort the frame, clean-up
 *              : and restart the queue. If the frame continues, advance the 
 *              : DMA pointer and restart the queue.
 *              : Also, this handler clears the EOQ interrupt associated
 *              : with.
 =========================================================================*/
SpacEthRtnCode_t EthTxWaitIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthTxQueueIsr
 *
 *  Arguments   : portId - Port ID (0, 1)
 *              : info - input, used to retrieve the qeue id. 
 * 
 *  Description : GigE's TX QUEUE ISR.
 * 
 *  return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *              : ETH_BASE_ADDR_ERR - Invalid chip base address.
 *
 *  Note        : Use of "PRINTF" macro to allow for non-blocking logging.
 *              : As the driver checks for available space in the TX queue,
 *              : a EOQ condition is expected to happen if  DMA has encountered
 *              : an ownership EOQ condition, after an EOF. Restart the queue.
 *              : Update the queue pointer if NULL termination.
 =========================================================================*/
SpacEthRtnCode_t EthTxQueueIsr(
  UINT32 portId, 
  UINT32 info
);

/*=========================================================================
 *  Function    : EthDoGigE6_2and6_7
 *
 *  Arguments   : portId - port ID (0, 1).
 *              : direction - TX/RX. 
 *              : intr - Queue interrupt type.  
 * 
 *  Description : Handler for the GigE6_2and6_7 test.
 * 
 *  Return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *              : ETH_BASE_ADDR_ERR - Invalid chip base address.
 *
 *  Note        : N/A.
 =========================================================================*/
SpacEthRtnCode_t EthDoGigE6_2and6_7(
  UINT32 portId,
  EthDirFlow_t direction,
  EthQIntr_t intr 
);

/*=========================================================================
 *  Function    : GigE6_2and6_7
 *
 *  Arguments   : N/A
 * 
 *  Description : Verifies the interrupt triggering.
 * 
 *  Return      : ETH_OK - Operation succeded.
 *
 *  Note        : N/A.
 =========================================================================*/
SpacEthRtnCode_t GigE6_2and6_7(
  void
);

/*=========================================================================
 *  Function    : gige6_2and6_7 - Command Service Routine.
 *
 *  Arguments   : option - command option (/h, /1, /2 and /3), this argument
 *                          may be ignored if the corresponding command does
 *                          not have any options.
 *                param_string - user specified test parameters, ignored.
 *
 *  Description : Executes the test command.
 * 
 *  Return      : always 0
 *
 ========================================================================*/
int gige6_2and6_7(int option, char* param_string);

/*=========================================================================
 *  Function    : EthDoGigE6_5
 *
 *  Arguments   : portId - port ID (0, 1).
 *              : direction - TX/RX.
 * 
 *  Description : Handler for the GigE6_5 test.
 * 
 *  Return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : N/A.
 =========================================================================*/
SpacEthRtnCode_t EthDoGigE6_5(
  UINT32 portId,
  EthDirFlow_t direction
);

/*=========================================================================
 *  Function    : GigE6_5
 *
 *  Arguments   : N/A.
 * 
 *  Description : Verifies the RX/TX idle interrupts.
 * 
 *  Return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *              : ETH_BASE_ADDR_ERR - Invalid chip base address. 
 *
 *  Note        : N/A.
 =========================================================================*/
SpacEthRtnCode_t GigE6_5(
  void
);

/*=========================================================================
 *  Function    : gige6_5 - Command Service Routine.
 *
 *  Arguments   : option - command option (/h, /1, /2 and /3), this argument
 *                          may be ignored if the corresponding command does
 *                          not have any options.
 *                param_string - user specified test parameters, ignored.
 *
 *  Description : Executes the test command.
 * 
 *  Return      : always 0
 *
 ========================================================================*/
int gige6_5(int option, char* param_string);

/*=========================================================================
 *  Function    : EthDoGigE6_6
 *
 *  Arguments   : portId - port ID (0, 1).
 * 
 *  Description : Handler for the GigE6_6 test.
 * 
 *  Return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : N/A.
 =========================================================================*/
SpacEthRtnCode_t EthDoGigE6_6(
  UINT32 portId
);

/*=========================================================================
 *  Function    : GigE6_6
 *
 *  Arguments   : N/A.
 * 
 *  Description : Tests the Descriptor Error (TX) interrupt.
 * 
 *  Return      : ETH_OK - Operation succeded.
 *
 *  Note        : N/A.
 =========================================================================*/
SpacEthRtnCode_t GigE6_6(
  void
);

/*=========================================================================
 *  Function    : gige6_6 - Command Service Routine.
 *
 *  Arguments   : option - command option (/h, /1, /2 and /3), this argument
 *                          may be ignored if the corresponding command does
 *                          not have any options.
 *                param_string - user specified test parameters, ignored.
 *
 *  Description : Executes the test command.
 * 
 *  Return      : always 0
 *
 ========================================================================*/
int gige6_6(int option, char* param_string);

/*=========================================================================
 *  Function    : EthDoGigE6_8
 *
 *  Arguments   : portId - port ID (0, 1).
 *              : direction - TX/RX.
 * 
 *  Description : Handler for the GigE6_8 test.
 * 
 *  Return      : ETH_PARAM_ERR - Invalid parameter.
 *              : ETH_OK - Operation succeded.
 *
 *  Note        : N/A.
 =========================================================================*/
SpacEthRtnCode_t EthDoGigE6_8(
  UINT32 portId,
  EthDirFlow_t direction
);

/*=========================================================================
 *  Function    : GigE6_8
 *
 *  Arguments   : N/A.
 * 
 *  Description : Tests the WAIT interrupt.
 * 
 *  Return      : ETH_OK - Operation succeded.
 *
 *  Note        : N/A.
 =========================================================================*/
SpacEthRtnCode_t GigE6_8(
  void
);

/*=========================================================================
 *  Function    : gige6_8 - Command Service Routine.
 *
 *  Arguments   : option - command option (/h, /1, /2 and /3), this argument
 *                          may be ignored if the corresponding command does
 *                          not have any options.
 *                param_string - user specified test parameters, ignored.
 *
 *  Description : Executes the test command.
 * 
 *  Return      : always 0
 *
 ========================================================================*/
int gige6_8(int option, char* param_string);


#endif  /* _SPAC_ETH_ISR_H_ */





